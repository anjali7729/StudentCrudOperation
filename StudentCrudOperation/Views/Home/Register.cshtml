@{
    ViewData["Title"] = "Register";
}
<head>
    <title>@ViewData["Title"]</title>
    <style>
        .error {
            color: red;
        };
        .form-control{
            color: black;
        }
    </style>
</head>
<body>
    <div class="container-lg shadow p-3 mb-5 mt-5 w-50 bg-white rounded">
        <h2>@ViewData["Title"]</h2>

        <form id="registrationForm" method="post" asp-action="Register">
            <div class="form-group">
                <label for="FullName">Name</label>
                <input type="text" name="FullName" id="FullName" class="form-control" placeholder="Enter FullName" />
                <span class="text-danger" id="FullNameError"></span>
            </div>

            <div class="form-group">
                <label for="Email">Email</label>
                <input type="email" name="Email" id="Email" class="form-control" placeholder="Email" />
                <span class="text-danger" id="emailError"></span>
            </div>

            <div class="form-group">
                <label for="Password">Password</label>
                <input type="password" name="Password" id="Password" class="form-control" placeholder="Password" />
                <span class="text-danger" id="passwordError"></span>
            </div>

            <div class="form-group">
                <label for="CPassword">Confirm Password</label>
                <input type="password" name="CPassword" id="CPassword" class="form-control" placeholder="Confirm Password" />
                <span class="text-danger" id="CpasswordError"></span>
            </div>

            <button type="submit" class="btn btn-primary mt-2">Register</button>
        </form>
    </div>
</body>
    @section Scripts {
        @await Html.PartialAsync("_ValidationScriptsPartial")

        <!-- Custom script after validation scripts -->
        <script>
            $(document).ready(function () {
                debugger
                $('#registrationForm').validate({
                    rules: {
                        FullName: {
                            required: true,
                            minlength: 2,
                            maxlength: 10,
                            regex: /^[a-zA-Z]+$/
                        },
                        Email: {
                            required: true,
                            email: true,
                            remote: {
                            url: "/Home/CheckEmail",
                                type: "post",
                                data: {
                                    email: function () {
                                    return $("#Email").val();
                                    },
                                    currentUserId: function () {
                                        // Get the current user ID from your form or wherever it is stored
                                        return $("#hdnId").val();
                                    }
                                },
                            }
                        },
                        Password: {
                            required: true,
                            minlength: 8,
                            regex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/
                        }, 
                        CPassword: {
                            required: true,
                            equalTo: "#Password"  
                        }
                    },
                    messages: {
                        FullName: {
                            required: "Please enter your name",
                            minlength: "Name must be at least 2 characters",
                            maxlength: "Name cannot exceed 10 characters",
                            regex: "Name must contain only letters"
                        },
                        Email: {
                            required: "Please enter your email",
                            email: "Please enter a valid email",
                            remote: "The corresponding email already exists"
                        },
                        Password: {
                            required: "Please provide a password",
                            minlength: "Password must be at least 8 characters long",
                            regex: "Password must contain an uppercase, a lowercase, a digit, and a special character"
                        },
                        CPassword: {
                            required: "Please confirm your password",
                            equalTo: "Passwords do not match"
                        }
                    }
                });

                $.validator.addMethod("regex", function (value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                });
            });
        </script>
    }

