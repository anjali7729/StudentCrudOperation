@model StudentCrudOperation.Models.Student

@{
    ViewData["Title"] = "Create";
}
<head>
    <title>@ViewData["Title"]</title>
    <style>
        .error {
            color: red;
        }

        ;
        .form-control {
            color: black;
        }
    </style>
</head>
<body>
<h1>Create</h1>

<h4>Student</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" id="studentForm" method="post" enctype="multipart/form-data">
            <div class="form-group">
                    <label asp-for="FirstName" for="FirstName" class="control-label"></label>
                    <input class="form-control" name="FirstName" id="FirstName" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="LastName" class="control-label">LastName</label>
                <input class="form-control" name="LastName" id="LastName" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="Email" class="control-label">Email</label>
                <input class="form-control" id="Email" name="Email" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="Phone" class="control-label">Phone</label>
                <input class="form-control" name="Phone" id="Phone" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="Address" class="control-label">Adddress</label>
                <textarea class="form-control" name="Address" id="Address"></textarea>
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="STD" class="control-label">STD</label>
                <input class="form-control" name="STD" id="STD" />
                <span asp-validation-for="STD" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="DOB" class="control-label">DOB</label>
                <input type="date" class="form-control" name="DOB" id="DOB" />
                <span asp-validation-for="DOB" class="text-danger"></span>
            </div>
            <div class="form-group">
                    <label for="ImageFile">ImageFile</label>
                <input type="file" class="form-control" name="ImageFile" id="ImageFile" />
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
</body>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        $(document).ready(function () {
            $('#studentForm').validate({
                rules: {
                    FirstName: {
                        required: true,
                        minlength: 2,
                        maxlength: 10,
                        regex: /^[a-zA-Z]+$/
                    },
                    LastName: {
                        required: true,
                        minlength: 2,
                        maxlength: 10,
                        regex: /^[a-zA-Z]+$/
                    },
                    Email: {
                        required: true,
                        email: true,
                        remote: {
                            url: "/Students/CheckEmail",
                            type: "post",
                            data: {
                                email: function () {
                                    return $("#Email").val();
                                },
                                currentUserId: function () {
                                    // Get the current user ID from your form or wherever it is stored
                                    return $("#hdnId").val();
                                }
                            },
                        }
                    },
                    Phone: {
                        required: true,
                        digits: true,
                        minlength: 10,
                        maxlength: 10
                    },
                    Address: {
                        required: true,
                        maxlength: 50
                    },
                    STD: {
                        required: true,
                        range: [1, 12]
                    },
                    DOB: {
                        required: true,
                        date: true
                    },
                    ImageFile: {
                        required:true
                    }
                },
                messages: {
                    FirstName: {
                        required: "First name is required.",
                        minlength: "First name must be at least 2 characters long.",
                        regex: "First name cannot contain numbers, spaces, or special characters."
                    },
                    LastName: {
                        required: "Last name is required.",
                        minlength: "Last name must be at least 2 characters long.",
                        regex: "Last name cannot contain numbers, spaces, or special characters."
                    },
                    Email: {
                        required: "Email is required.",
                        email: "Please enter a valid email address.",
                        remote: "Email already exists."
                    },
                    Phone: {
                        required: "Phone number is required.",
                        minlength: "Phone number must be 10 digits.",
                        maxlength: "Phone number must be 10 digits.",
                        digits: "Phone number must be numeric."
                    },
                    Address: {
                        required: "Address is required.",
                        maxlength: "Address only 50 Charachter Allow.",
                    },
                    STD: {
                        required: "Standard is required.",
                        range: "Standard must be between 1 and 12."
                    },
                    DOB: {
                        required: "Date of birth is required.",
                        date: "Please enter a valid date."
                    },
                    ImageFile: {
                        required: "ImageFile is required."
                    }
                }
            });

            $.validator.addMethod("regex", function (value, element, regexp) {
                var re = new RegExp(regexp);
                return this.optional(element) || re.test(value);
            });

        });
    </script>

}

